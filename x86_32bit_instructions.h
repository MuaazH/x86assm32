
const JumpInstruction cjmp_instructions[] {
	// mnemonic   opcode
	{0x0, "jo"},
	{0x1, "jno"},

	{0x2, "jb"},
	{0x2, "jc"},
	{0x2, "jnae"},

	{0x3, "jae"},
	{0x3, "jnb"},
	{0x3, "jnc"},

	{0x4, "jz"},
	{0x4, "je"},

	{0x5, "jnz"},
	{0x5, "jne"},

	{0x6, "jbe"},
	{0x6, "jna"},

	{0x7, "ja"},
	{0x7, "jnbe"}, 

	{0x8, "js"},

	{0x9, "jns"},

	{0xA, "jp"},
	{0xA, "jpe"},

	{0xB, "jnp"},
	{0xB, "jpo"},

	{0xC, "jl"},
	{0xC, "jnge"}, 

	{0xD, "jge"},
	{0xD, "jnl"},

	{0xE, "jle"},
	{0xE, "jng"},

	{0xF, "jg"},
	{0xF, "jnle"}

};

const Instruction movsx_instructions[] = {
	// pf,   op,  op2,  ext,  cnt,    o1,   o2,   o3,   o4,  mnmnc,  flags
	// 16 <- 8
	{0x66, 0xBE, 0x00, 0x00, 0x02, REG16, REG8, 0x00, 0x00, "movsx", FLAG_MODRM | FLAG_0F_PREFIX},
	{0x66, 0xBE, 0x00, 0x00, 0x02, REG16, MEM8, 0x00, 0x00, "movsx", FLAG_MODRM | FLAG_0F_PREFIX},
	// 32 <- 8
	{0x00, 0xBE, 0x00, 0x00, 0x02, REG32, REG8, 0x00, 0x00, "movsx", FLAG_MODRM | FLAG_0F_PREFIX},
	{0x00, 0xBE, 0x00, 0x00, 0x02, REG32, MEM8, 0x00, 0x00, "movsx", FLAG_MODRM | FLAG_0F_PREFIX},
	// 32 <- 16
	{0x00, 0xBF, 0x00, 0x00, 0x02, REG32, REG16, 0x00, 0x00, "movsx", FLAG_MODRM | FLAG_0F_PREFIX},
	{0x00, 0xBF, 0x00, 0x00, 0x02, REG32, MEM16, 0x00, 0x00, "movsx", FLAG_MODRM | FLAG_0F_PREFIX}
};

const Instruction movzx_instructions[] = {
	// pf,   op,  op2,  ext,  cnt,    o1,   o2,   o3,   o4,  mnmnc,  flags
	// 16 <- 8
	{0x66, 0xB6, 0x00, 0x00, 0x02, REG16, REG8, 0x00, 0x00, "movzx", FLAG_MODRM | FLAG_0F_PREFIX},
	{0x66, 0xB6, 0x00, 0x00, 0x02, REG16, MEM8, 0x00, 0x00, "movzx", FLAG_MODRM | FLAG_0F_PREFIX},
	// 32 <- 8
	{0x00, 0xB6, 0x00, 0x00, 0x02, REG32, REG8, 0x00, 0x00, "movzx", FLAG_MODRM | FLAG_0F_PREFIX},
	{0x00, 0xB6, 0x00, 0x00, 0x02, REG32, MEM8, 0x00, 0x00, "movzx", FLAG_MODRM | FLAG_0F_PREFIX},
	// 32 <- 16
	{0x00, 0xB7, 0x00, 0x00, 0x02, REG32, REG16, 0x00, 0x00, "movzx", FLAG_MODRM | FLAG_0F_PREFIX},
	{0x00, 0xB7, 0x00, 0x00, 0x02, REG32, MEM16, 0x00, 0x00, "movzx", FLAG_MODRM | FLAG_0F_PREFIX}
};

const Instruction mov_instructions[] = {
	// pf,   op,  op2,  ext,  cnt, o1,   o2,   o3,   o4,  mnmnc,  flags
	// 8 <- 8
	{0x00, 0x8A, 0x00, 0x00, 0x02, REG8, REG8, 0x00, 0x00, "mov", FLAG_MODRM},
	{0x00, 0x88, 0x00, 0x00, 0x02, REG8, REG8, 0x00, 0x00, "mov", FLAG_MODRM | FLAG_REVERSE_OPERANDS},
	{0x00, 0x8A, 0x00, 0x00, 0x02, REG8, MEM8, 0x00, 0x00, "mov", FLAG_MODRM},
	{0x00, 0x88, 0x00, 0x00, 0x02, MEM8, REG8, 0x00, 0x00, "mov", FLAG_MODRM | FLAG_REVERSE_OPERANDS},

	{0x00, 0xB0, 0x00, 0x00, 0x02, REG8_AL, IMM8, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0xB1, 0x00, 0x00, 0x02, REG8_CL, IMM8, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0xB2, 0x00, 0x00, 0x02, REG8_DL, IMM8, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0xB3, 0x00, 0x00, 0x02, REG8_BL, IMM8, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0xB4, 0x00, 0x00, 0x02, REG8_AH, IMM8, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0xB5, 0x00, 0x00, 0x02, REG8_CH, IMM8, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0xB6, 0x00, 0x00, 0x02, REG8_DH, IMM8, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0xB7, 0x00, 0x00, 0x02, REG8_BH, IMM8, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},

	{0x00, 0xC6, 0x00, 0x00, 0x02, MEM8, IMM8, 0x00, 0x00, "mov", FLAG_MODRM | FLAG_MODRM_OPCODE},

	// 16 <- 16
	{0x66, 0x8B, 0x00, 0x00, 0x02, REG16, REG16, 0x00, 0x00, "mov", FLAG_MODRM},
	{0x66, 0x89, 0x00, 0x00, 0x02, REG16, REG16, 0x00, 0x00, "mov", FLAG_MODRM | FLAG_REVERSE_OPERANDS},
	{0x66, 0x8B, 0x00, 0x00, 0x02, REG16, MEM16, 0x00, 0x00, "mov", FLAG_MODRM},
	{0x66, 0x89, 0x00, 0x00, 0x02, MEM16, REG16, 0x00, 0x00, "mov", FLAG_MODRM | FLAG_REVERSE_OPERANDS},

	{0x66, 0xB8, 0x00, 0x00, 0x02, REG16_AX, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x66, 0xB9, 0x00, 0x00, 0x02, REG16_CX, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x66, 0xBA, 0x00, 0x00, 0x02, REG16_DX, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x66, 0xBB, 0x00, 0x00, 0x02, REG16_BX, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x66, 0xBC, 0x00, 0x00, 0x02, REG16_SP, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x66, 0xBD, 0x00, 0x00, 0x02, REG16_BP, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x66, 0xBE, 0x00, 0x00, 0x02, REG16_SI, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x66, 0xBF, 0x00, 0x00, 0x02, REG16_DI, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},

	{0x66, 0xC7, 0x00, 0x00, 0x02, MEM16, IMM16, 0x00, 0x00, "mov", FLAG_MODRM | FLAG_MODRM_OPCODE},

	// 32 <- 32
	{0x00, 0x8B, 0x00, 0x00, 0x02, REG32, REG32, 0x00, 0x00, "mov", FLAG_MODRM},
	{0x00, 0x89, 0x00, 0x00, 0x02, REG32, REG32, 0x00, 0x00, "mov", FLAG_MODRM | FLAG_REVERSE_OPERANDS},
	{0x00, 0x8B, 0x00, 0x00, 0x02, REG32, MEM32, 0x00, 0x00, "mov", FLAG_MODRM},
	{0x00, 0x89, 0x00, 0x00, 0x02, MEM32, REG32, 0x00, 0x00, "mov", FLAG_MODRM | FLAG_REVERSE_OPERANDS},

	{0x00, 0xB8, 0x00, 0x00, 0x02, REG32_EAX, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0xB9, 0x00, 0x00, 0x02, REG32_ECX, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0xBA, 0x00, 0x00, 0x02, REG32_EDX, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0xBB, 0x00, 0x00, 0x02, REG32_EBX, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0xBC, 0x00, 0x00, 0x02, REG32_ESP, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0xBD, 0x00, 0x00, 0x02, REG32_EBP, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0xBE, 0x00, 0x00, 0x02, REG32_ESI, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0xBF, 0x00, 0x00, 0x02, REG32_EDI, IMM32, 0x00, 0x00, "mov", FLAG_2ND_IMM_OPERAND_ONLY},

	{0x00, 0xC7, 0x00, 0x00, 0x02, MEM32, IMM32, 0x00, 0x00, "mov", FLAG_MODRM | FLAG_MODRM_OPCODE}

};

const Instruction cmp_instructions[] = {
	// pf,   op,  op2,  ext,  cnt,    o1,    o2,   o3,   o4,  mnmnc,  flags
	
	// 8, 8
	{0x00, 0x3C, 0x00, 0x00, 0x02, REG8_AL, IMM8, 0x00, 0x00, "cmp", FLAG_2ND_IMM_OPERAND_ONLY},

	{0x00, 0x80, 0x00, 0x07, 0x02, REG8, IMM8, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0x80, 0x00, 0x07, 0x02, MEM8, IMM8, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_MODRM_OPCODE},

	{0x00, 0x38, 0x00, 0x00, 0x02, REG8, REG8, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_REVERSE_OPERANDS},
	{0x00, 0x38, 0x00, 0x00, 0x02, MEM8, REG8, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_REVERSE_OPERANDS},

	{0x00, 0x3A, 0x00, 0x00, 0x02, REG8, REG8, 0x00, 0x00, "cmp", FLAG_MODRM},
	{0x00, 0x3A, 0x00, 0x00, 0x02, REG8, MEM8, 0x00, 0x00, "cmp", FLAG_MODRM},

	// 16, 16
	{0x66, 0x3D, 0x00, 0x00, 0x02, REG16_AX, IMM16, 0x00, 0x00, "cmp", FLAG_2ND_IMM_OPERAND_ONLY},

	{0x66, 0x83, 0x00, 0x07, 0x02, REG16, IMM8, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0x83, 0x00, 0x07, 0x02, MEM16, IMM8, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_MODRM_OPCODE},

	{0x66, 0x81, 0x00, 0x07, 0x02, REG16, IMM16, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0x81, 0x00, 0x07, 0x02, MEM16, IMM16, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_MODRM_OPCODE},

	{0x66, 0x39, 0x00, 0x00, 0x02, REG16, REG16, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_REVERSE_OPERANDS},
	{0x66, 0x39, 0x00, 0x00, 0x02, MEM16, REG16, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_REVERSE_OPERANDS},

	{0x66, 0x3B, 0x00, 0x00, 0x02, REG16, REG16, 0x00, 0x00, "cmp", FLAG_MODRM},
	{0x66, 0x3B, 0x00, 0x00, 0x02, REG16, MEM16, 0x00, 0x00, "cmp", FLAG_MODRM},

	// 32, 32
	{0x00, 0x3D, 0x00, 0x00, 0x02, REG32_EAX, IMM32, 0x00, 0x00, "cmp", FLAG_2ND_IMM_OPERAND_ONLY},

	{0x00, 0x83, 0x00, 0x07, 0x02, REG32, IMM8, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0x83, 0x00, 0x07, 0x02, MEM32, IMM8, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_MODRM_OPCODE},

	{0x00, 0x81, 0x00, 0x07, 0x02, REG32, IMM32, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0x81, 0x00, 0x07, 0x02, MEM32, IMM32, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_MODRM_OPCODE},

	{0x00, 0x39, 0x00, 0x00, 0x02, REG32, REG32, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_REVERSE_OPERANDS},
	{0x00, 0x39, 0x00, 0x00, 0x02, MEM32, REG32, 0x00, 0x00, "cmp", FLAG_MODRM | FLAG_REVERSE_OPERANDS},

	{0x00, 0x3B, 0x00, 0x00, 0x02, REG32, REG32, 0x00, 0x00, "cmp", FLAG_MODRM},
	{0x00, 0x3B, 0x00, 0x00, 0x02, REG32, MEM32, 0x00, 0x00, "cmp", FLAG_MODRM}
};

const Instruction shr_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,   o2,   o3,   o4,   mnmnc,  flags

	// 8 bit
	{0x00, 0xD0, 0x00, 0x05, 0x01, REG8, 0x00, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xD0, 0x00, 0x05, 0x01, MEM8, 0x00, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xD2, 0x00, 0x05, 0x02, REG8, REG8_CL, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x00, 0xD2, 0x00, 0x05, 0x02, MEM8, REG8_CL, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x00, 0xC0, 0x00, 0x05, 0x02, REG8, IMM8, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xC0, 0x00, 0x05, 0x02, MEM8, IMM8, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE},
	// 16 bit
	{0x66, 0xD1, 0x00, 0x05, 0x01, REG16, 0x00, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0xD1, 0x00, 0x05, 0x01, MEM16, 0x00, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0xD3, 0x00, 0x05, 0x02, REG16, REG8_CL, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x66, 0xD3, 0x00, 0x05, 0x02, MEM16, REG8_CL, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x66, 0xC1, 0x00, 0x05, 0x02, REG16, IMM8, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0xC1, 0x00, 0x05, 0x02, MEM16, IMM8, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE},
	// 32 bit
	{0x00, 0xD1, 0x00, 0x05, 0x01, REG32, 0x00, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xD1, 0x00, 0x05, 0x01, MEM32, 0x00, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xD3, 0x00, 0x05, 0x02, REG32, REG8_CL, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x00, 0xD3, 0x00, 0x05, 0x02, MEM32, REG8_CL, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x00, 0xC1, 0x00, 0x05, 0x02, REG32, IMM8, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xC1, 0x00, 0x05, 0x02, MEM32, IMM8, 0x00, 0x00, "shr", FLAG_MODRM | FLAG_MODRM_OPCODE}
};

const Instruction sar_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,   o2,   o3,   o4,   mnmnc,  flags

	// 8 bit
	{0x00, 0xD0, 0x00, 0x07, 0x01, REG8, 0x00, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xD0, 0x00, 0x07, 0x01, MEM8, 0x00, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xD2, 0x00, 0x07, 0x02, REG8, REG8_CL, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x00, 0xD2, 0x00, 0x07, 0x02, MEM8, REG8_CL, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x00, 0xC0, 0x00, 0x07, 0x02, REG8, IMM8, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xC0, 0x00, 0x07, 0x02, MEM8, IMM8, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE},
	// 16 bit
	{0x66, 0xD1, 0x00, 0x07, 0x01, REG16, 0x00, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0xD1, 0x00, 0x07, 0x01, MEM16, 0x00, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0xD3, 0x00, 0x07, 0x02, REG16, REG8_CL, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x66, 0xD3, 0x00, 0x07, 0x02, MEM16, REG8_CL, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x66, 0xC1, 0x00, 0x07, 0x02, REG16, IMM8, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0xC1, 0x00, 0x07, 0x02, MEM16, IMM8, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE},
	// 32 bit
	{0x00, 0xD1, 0x00, 0x07, 0x01, REG32, 0x00, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xD1, 0x00, 0x07, 0x01, MEM32, 0x00, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xD3, 0x00, 0x07, 0x02, REG32, REG8_CL, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x00, 0xD3, 0x00, 0x07, 0x02, MEM32, REG8_CL, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x00, 0xC1, 0x00, 0x07, 0x02, REG32, IMM8, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xC1, 0x00, 0x07, 0x02, MEM32, IMM8, 0x00, 0x00, "sar", FLAG_MODRM | FLAG_MODRM_OPCODE}
};

// sal & shl
const Instruction shl_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,   o2,   o3,   o4,   mnmnc,  flags

	// 8 bit
	{0x00, 0xD0, 0x00, 0x04, 0x01, REG8, 0x00, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xD0, 0x00, 0x04, 0x01, MEM8, 0x00, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xD2, 0x00, 0x04, 0x02, REG8, REG8_CL, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x00, 0xD2, 0x00, 0x04, 0x02, MEM8, REG8_CL, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x00, 0xC0, 0x00, 0x04, 0x02, REG8, IMM8, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xC0, 0x00, 0x04, 0x02, MEM8, IMM8, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE},
	// 16 bit
	{0x66, 0xD1, 0x00, 0x04, 0x01, REG16, 0x00, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0xD1, 0x00, 0x04, 0x01, MEM16, 0x00, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0xD3, 0x00, 0x04, 0x02, REG16, REG8_CL, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x66, 0xD3, 0x00, 0x04, 0x02, MEM16, REG8_CL, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x66, 0xC1, 0x00, 0x04, 0x02, REG16, IMM8, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0xC1, 0x00, 0x04, 0x02, MEM16, IMM8, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE},
	// 32 bit
	{0x00, 0xD1, 0x00, 0x04, 0x01, REG32, 0x00, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xD1, 0x00, 0x04, 0x01, MEM32, 0x00, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xD3, 0x00, 0x04, 0x02, REG32, REG8_CL, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x00, 0xD3, 0x00, 0x04, 0x02, MEM32, REG8_CL, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE | FLAG_1ST_OPERAND_ONLY},
	{0x00, 0xC1, 0x00, 0x04, 0x02, REG32, IMM8, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xC1, 0x00, 0x04, 0x02, MEM32, IMM8, 0x00, 0x00, "shl", FLAG_MODRM | FLAG_MODRM_OPCODE}
};

const Instruction mul_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,   o2,   o3,   o4,   mnmnc,  flags
	{0x00, 0xF6, 0x00, 0x04, 0x01, REG8, 0x00, 0x00, 0x00, "mul", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xF6, 0x00, 0x04, 0x01, MEM8, 0x00, 0x00, 0x00, "mul", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0xF7, 0x00, 0x04, 0x01, MEM16, 0x00, 0x00, 0x00, "mul", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0xF7, 0x00, 0x04, 0x01, REG16, 0x00, 0x00, 0x00, "mul", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xF7, 0x00, 0x04, 0x01, REG32, 0x00, 0x00, 0x00, "mul", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xF7, 0x00, 0x04, 0x01, MEM32, 0x00, 0x00, 0x00, "mul", FLAG_MODRM | FLAG_MODRM_OPCODE}
};

const Instruction imul_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,   o2,   o3,   o4,   mnmnc,  flags
	{0x00, 0xF6, 0x00, 0x05, 0x01, REG8, 0x00, 0x00, 0x00, "imul", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0xF7, 0x00, 0x05, 0x01, MEM16, 0x00, 0x00, 0x00, "imul", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xF7, 0x00, 0x05, 0x01, MEM32, 0x00, 0x00, 0x00, "imul", FLAG_MODRM | FLAG_MODRM_OPCODE},
	// 66 0F AF
	{0x66, 0xAF, 0x00, 0x00, 0x02, REG16, REG16, 0x00, 0x00, "imul", FLAG_MODRM | FLAG_0F_PREFIX},
	{0x66, 0xAF, 0x00, 0x00, 0x02, REG16, MEM16, 0x00, 0x00, "imul", FLAG_MODRM | FLAG_0F_PREFIX},
	// 0F AF
	{0x00, 0xAF, 0x00, 0x00, 0x02, REG32, REG32, 0x00, 0x00, "imul", FLAG_MODRM | FLAG_0F_PREFIX},
	{0x00, 0xAF, 0x00, 0x00, 0x02, REG32, MEM32, 0x00, 0x00, "imul", FLAG_MODRM | FLAG_0F_PREFIX},
	// 66 6B
	{0x66, 0x6B, 0x00, 0x00, 0x03, REG16, REG16, IMM8, 0x00, "imul", FLAG_MODRM },
	{0x66, 0x6B, 0x00, 0x00, 0x03, REG16, MEM16, IMM8, 0x00, "imul", FLAG_MODRM },
	// 6B
	{0x00, 0x6B, 0x00, 0x00, 0x03, REG32, REG32, IMM8, 0x00, "imul", FLAG_MODRM },
	{0x00, 0x6B, 0x00, 0x00, 0x03, REG32, MEM32, IMM8, 0x00, "imul", FLAG_MODRM },
	// 66 69
	{0x66, 0x69, 0x00, 0x00, 0x03, REG32, REG32, IMM16, 0x00, "imul", FLAG_MODRM },
	{0x66, 0x69, 0x00, 0x00, 0x03, REG32, MEM32, IMM16, 0x00, "imul", FLAG_MODRM },
	// 69
	{0x00, 0x69, 0x00, 0x00, 0x03, REG32, REG32, IMM32, 0x00, "imul", FLAG_MODRM },
	{0x00, 0x69, 0x00, 0x00, 0x03, REG32, MEM32, IMM32, 0x00, "imul", FLAG_MODRM }
};

const Instruction add_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,      o2,   o3,   o4,   mnmnc,  flags
	// eax shortcuts
	{0x00, 0x04, 0x00, 0x00, 0x02, REG8_AL, IMM8, 0x00, 0x00, "add", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x66, 0x05, 0x00, 0x00, 0x02, REG16_AX, IMM16, 0x00, 0x00, "add", FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0x05, 0x00, 0x00, 0x02, REG32_EAX, IMM32, 0x00, 0x00, "add", FLAG_2ND_IMM_OPERAND_ONLY},
	// imm of all sizes
	{0x00, 0x80, 0x00, 0x00, 0x02, REG8, IMM8, 0x00, 0x00, "add", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0x80, 0x00, 0x00, 0x02, MEM8, IMM8, 0x00, 0x00, "add", FLAG_MODRM | FLAG_MODRM_OPCODE},

	{0x66, 0x81, 0x00, 0x00, 0x02, REG16, IMM16, 0x00, 0x00, "add", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0x81, 0x00, 0x00, 0x02, MEM16, IMM16, 0x00, 0x00, "add", FLAG_MODRM | FLAG_MODRM_OPCODE},

	{0x00, 0x81, 0x00, 0x00, 0x02, REG32, IMM32, 0x00, 0x00, "add", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0x81, 0x00, 0x00, 0x02, MEM32, IMM32, 0x00, 0x00, "add", FLAG_MODRM | FLAG_MODRM_OPCODE},
	// imm 8
	{0x66, 0x83, 0x00, 0x00, 0x02, REG16, IMM8, 0x00, 0x00, "add", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0x83, 0x00, 0x00, 0x02, MEM16, IMM8, 0x00, 0x00, "add", FLAG_MODRM | FLAG_MODRM_OPCODE},

	{0x00, 0x83, 0x00, 0x00, 0x02, REG32, IMM8, 0x00, 0x00, "add", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0x83, 0x00, 0x00, 0x02, MEM32, IMM8, 0x00, 0x00, "add", FLAG_MODRM | FLAG_MODRM_OPCODE},
	// 8 <- 8
	{0x00, 0x02, 0x00, 0x00, 0x02, REG8, REG8, 0x00, 0x00, "add", FLAG_MODRM},
	{0x00, 0x00, 0x00, 0x00, 0x02, REG8, REG8, 0x00, 0x00, "add", FLAG_MODRM | FLAG_REVERSE_OPERANDS},
	{0x00, 0x02, 0x00, 0x00, 0x02, REG8, MEM8, 0x00, 0x00, "add", FLAG_MODRM},
	{0x00, 0x00, 0x00, 0x00, 0x02, MEM8, REG8, 0x00, 0x00, "add", FLAG_MODRM | FLAG_REVERSE_OPERANDS},
	// 16 <- 16
	{0x66, 0x03, 0x00, 0x00, 0x02, REG16, REG16, 0x00, 0x00, "add", FLAG_MODRM},
	{0x66, 0x01, 0x00, 0x00, 0x02, REG16, REG16, 0x00, 0x00, "add", FLAG_MODRM | FLAG_REVERSE_OPERANDS},
	{0x66, 0x03, 0x00, 0x00, 0x02, REG16, MEM16, 0x00, 0x00, "add", FLAG_MODRM},
	{0x66, 0x01, 0x00, 0x00, 0x02, MEM16, REG16, 0x00, 0x00, "add", FLAG_MODRM | FLAG_REVERSE_OPERANDS},
	// 32 <- 32
	{0x00, 0x03, 0x00, 0x00, 0x02, REG32, REG32, 0x00, 0x00, "add", FLAG_MODRM},
	{0x00, 0x01, 0x00, 0x00, 0x02, REG32, REG32, 0x00, 0x00, "add", FLAG_MODRM | FLAG_REVERSE_OPERANDS},
	{0x00, 0x03, 0x00, 0x00, 0x02, REG32, MEM32, 0x00, 0x00, "add", FLAG_MODRM},
	{0x00, 0x01, 0x00, 0x00, 0x02, MEM32, REG32, 0x00, 0x00, "add", FLAG_MODRM | FLAG_REVERSE_OPERANDS}

};

const Instruction lea_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,    o2,    o3,   o4,   mnmnc, flags
	{0x66, 0x8D, 0x00, 0x00, 0x02, REG16, MEM16, 0x00, 0x00, "lea", FLAG_MODRM},
	{0x00, 0x8D, 0x00, 0x00, 0x02, REG32, MEM32, 0x00, 0x00, "lea", FLAG_MODRM}
};

const Instruction push_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,    o2,    o3,   o4,   mnmnc, flags
	// single byte x16
	{0x66, 0x50 + AX, 0x00, 0x00, 0x01, REG16_AX, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},
	{0x66, 0x50 + CX, 0x00, 0x00, 0x01, REG16_CX, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},
	{0x66, 0x50 + DX, 0x00, 0x00, 0x01, REG16_DX, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},
	{0x66, 0x50 + BX, 0x00, 0x00, 0x01, REG16_BX, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},
	{0x66, 0x50 + SP, 0x00, 0x00, 0x01, REG16_SP, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},
	{0x66, 0x50 + BP, 0x00, 0x00, 0x01, REG16_BP, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},
	{0x66, 0x50 + SI, 0x00, 0x00, 0x01, REG16_SI, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},
	{0x66, 0x50 + DI, 0x00, 0x00, 0x01, REG16_DI, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},

	// single byte x32
	{0x00, 0x50 + EAX, 0x00, 0x00, 0x01, REG32_EAX, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},
	{0x00, 0x50 + ECX, 0x00, 0x00, 0x01, REG32_ECX, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},
	{0x00, 0x50 + EDX, 0x00, 0x00, 0x01, REG32_EDX, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},
	{0x00, 0x50 + EBX, 0x00, 0x00, 0x01, REG32_EBX, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},
	{0x00, 0x50 + ESP, 0x00, 0x00, 0x01, REG32_ESP, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},
	{0x00, 0x50 + EBP, 0x00, 0x00, 0x01, REG32_EBP, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},
	{0x00, 0x50 + ESI, 0x00, 0x00, 0x01, REG32_ESI, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},
	{0x00, 0x50 + EDI, 0x00, 0x00, 0x01, REG32_EDI, 0x00, 0x00, 0x00, "push", FLAG_SINGLE_BYTE},

	// imm
	{0x00, 0x6A, 0x00, 0x00, 0x01, IMM8, 0x00, 0x00, 0x00, "push", FLAG_1ST_IMM_OPERAND_ONLY},
	{0x66, 0x68, 0x00, 0x00, 0x01, IMM16, 0x00, 0x00, 0x00, "push", FLAG_1ST_IMM_OPERAND_ONLY},
	{0x00, 0x68, 0x00, 0x00, 0x01, IMM32, 0x00, 0x00, 0x00, "push", FLAG_1ST_IMM_OPERAND_ONLY},

	// reg/mem x16
	{0x66, 0xFF, 0x00, 0x06, 0x01, REG16, 0x00, 0x00, 0x00, "push", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0xFF, 0x00, 0x06, 0x01, MEM16, 0x00, 0x00, 0x00, "push", FLAG_MODRM | FLAG_MODRM_OPCODE},

	// reg/mem x32
	{0x00, 0xFF, 0x00, 0x06, 0x01, REG32, 0x00, 0x00, 0x00, "push", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0xFF, 0x00, 0x06, 0x01, MEM32, 0x00, 0x00, 0x00, "push", FLAG_MODRM | FLAG_MODRM_OPCODE},

	// TODO: add these
	//    0E push cs
	//    16 push ss
	//    1E push ds
	//    06 push es
	// 0F A0 push fs
	// 0F A8 push gs
};

const Instruction pop_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,    o2,    o3,   o4,   mnmnc, flags
	// single byte x16
	{0x66, 0x58 + AX, 0x00, 0x00, 0x01, REG16_AX, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},
	{0x66, 0x58 + CX, 0x00, 0x00, 0x01, REG16_CX, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},
	{0x66, 0x58 + DX, 0x00, 0x00, 0x01, REG16_DX, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},
	{0x66, 0x58 + BX, 0x00, 0x00, 0x01, REG16_BX, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},
	{0x66, 0x58 + SP, 0x00, 0x00, 0x01, REG16_SP, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},
	{0x66, 0x58 + BP, 0x00, 0x00, 0x01, REG16_BP, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},
	{0x66, 0x58 + SI, 0x00, 0x00, 0x01, REG16_SI, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},
	{0x66, 0x58 + DI, 0x00, 0x00, 0x01, REG16_DI, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},

	// single byte x32
	{0x00, 0x58 + EAX, 0x00, 0x00, 0x01, REG32_EAX, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},
	{0x00, 0x58 + ECX, 0x00, 0x00, 0x01, REG32_ECX, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},
	{0x00, 0x58 + EDX, 0x00, 0x00, 0x01, REG32_EDX, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},
	{0x00, 0x58 + EBX, 0x00, 0x00, 0x01, REG32_EBX, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},
	{0x00, 0x58 + ESP, 0x00, 0x00, 0x01, REG32_ESP, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},
	{0x00, 0x58 + EBP, 0x00, 0x00, 0x01, REG32_EBP, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},
	{0x00, 0x58 + ESI, 0x00, 0x00, 0x01, REG32_ESI, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},
	{0x00, 0x58 + EDI, 0x00, 0x00, 0x01, REG32_EDI, 0x00, 0x00, 0x00, "pop", FLAG_SINGLE_BYTE},

	// reg/mem x16
	{0x66, 0x8F, 0x00, 0x00, 0x01, REG16, 0x00, 0x00, 0x00, "pop", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0x8F, 0x00, 0x00, 0x01, MEM16, 0x00, 0x00, 0x00, "pop", FLAG_MODRM | FLAG_MODRM_OPCODE},

	// reg/mem x32
	{0x00, 0x8F, 0x00, 0x00, 0x01, REG32, 0x00, 0x00, 0x00, "pop", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0x8F, 0x00, 0x00, 0x01, MEM32, 0x00, 0x00, 0x00, "pop", FLAG_MODRM | FLAG_MODRM_OPCODE},

	// TODO: add these
	//    1F pop ds
	//    07 pop es
	//    17 pop ss
	// 0F A1 pop FS
	// 0F A9 pop GS
};


const Instruction sub_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,    o2,    o3,   o4,   mnmnc, flags

	{0x00, 0x2C, 0x00, 0x00, 0x02, REG8_AL, IMM8, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_2ND_IMM_OPERAND_ONLY},
	{0x66, 0x2D, 0x00, 0x00, 0x02, REG16_AX, IMM16, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_2ND_IMM_OPERAND_ONLY},
	{0x00, 0x2D, 0x00, 0x00, 0x02, REG32_EAX, IMM32, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_2ND_IMM_OPERAND_ONLY},

	{0x00, 0x80, 0x00, 0x05, 0x02, REG8, IMM8, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0x80, 0x00, 0x05, 0x02, MEM8, IMM8, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0x81, 0x00, 0x05, 0x02, REG16, IMM16, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0x81, 0x00, 0x05, 0x02, MEM16, IMM16, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0x81, 0x00, 0x05, 0x02, REG32, IMM32, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0x81, 0x00, 0x05, 0x02, MEM32, IMM32, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_MODRM_OPCODE},
	
	{0x66, 0x83, 0x00, 0x05, 0x02, REG16, IMM8, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0x83, 0x00, 0x05, 0x02, REG32, IMM8, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x66, 0x83, 0x00, 0x05, 0x02, MEM16, IMM8, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_MODRM_OPCODE},
	{0x00, 0x83, 0x00, 0x05, 0x02, MEM32, IMM8, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_MODRM_OPCODE},

	{0x00, 0x28, 0x00, 0x00, 0x02, REG8, REG8, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_REVERSE_OPERANDS },
	{0x00, 0x28, 0x00, 0x00, 0x02, MEM8, REG8, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_REVERSE_OPERANDS },
	{0x66, 0x29, 0x00, 0x00, 0x02, REG16, REG16, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_REVERSE_OPERANDS },
	{0x66, 0x29, 0x00, 0x00, 0x02, MEM16, REG16, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_REVERSE_OPERANDS },
	{0x00, 0x29, 0x00, 0x00, 0x02, REG32, REG32, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_REVERSE_OPERANDS },
	{0x00, 0x29, 0x00, 0x00, 0x02, MEM32, REG32, 0x00, 0x00, "sub", FLAG_MODRM | FLAG_REVERSE_OPERANDS },

	{0x00, 0x2A, 0x00, 0x00, 0x02, REG8, REG8, 0x00, 0x00, "sub", FLAG_MODRM },
	{0x00, 0x2A, 0x00, 0x00, 0x02, REG8, MEM8, 0x00, 0x00, "sub", FLAG_MODRM },
	{0x66, 0x2B, 0x00, 0x00, 0x02, REG16, REG16, 0x00, 0x00, "sub", FLAG_MODRM },
	{0x66, 0x2B, 0x00, 0x00, 0x02, REG16, MEM16, 0x00, 0x00, "sub", FLAG_MODRM },
	{0x00, 0x2B, 0x00, 0x00, 0x02, REG32, REG32, 0x00, 0x00, "sub", FLAG_MODRM },
	{0x00, 0x2B, 0x00, 0x00, 0x02, REG32, MEM32, 0x00, 0x00, "sub", FLAG_MODRM }

};


const Instruction inc_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,    o2,    o3,   o4,   mnmnc, flags
	// single byte x16
	{0x66, 0x40 + AX, 0x00, 0x00, 0x01, REG16_AX, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	{0x66, 0x40 + CX, 0x00, 0x00, 0x01, REG16_CX, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	{0x66, 0x40 + DX, 0x00, 0x00, 0x01, REG16_DX, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	{0x66, 0x40 + BX, 0x00, 0x00, 0x01, REG16_BX, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	{0x66, 0x40 + SP, 0x00, 0x00, 0x01, REG16_SP, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	{0x66, 0x40 + BP, 0x00, 0x00, 0x01, REG16_BP, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	{0x66, 0x40 + SI, 0x00, 0x00, 0x01, REG16_SI, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	{0x66, 0x40 + DI, 0x00, 0x00, 0x01, REG16_DI, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	// single byte x32
	{0x00, 0x40 + EAX, 0x00, 0x00, 0x01, REG32_EAX, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	{0x00, 0x40 + ECX, 0x00, 0x00, 0x01, REG32_ECX, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	{0x00, 0x40 + EDX, 0x00, 0x00, 0x01, REG32_EDX, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	{0x00, 0x40 + EBX, 0x00, 0x00, 0x01, REG32_EBX, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	{0x00, 0x40 + ESP, 0x00, 0x00, 0x01, REG32_ESP, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	{0x00, 0x40 + EBP, 0x00, 0x00, 0x01, REG32_EBP, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	{0x00, 0x40 + ESI, 0x00, 0x00, 0x01, REG32_ESI, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	{0x00, 0x40 + EDI, 0x00, 0x00, 0x01, REG32_EDI, 0x00, 0x00, 0x00, "inc", FLAG_SINGLE_BYTE},
	//
	{0x00, 0xFE, 0x00, 0x00, 0x01, REG8, 0x00, 0x00, 0x00, "inc", FLAG_MODRM | FLAG_MODRM_OPCODE },
	{0x00, 0xFE, 0x00, 0x00, 0x01, MEM8, 0x00, 0x00, 0x00, "inc", FLAG_MODRM | FLAG_MODRM_OPCODE },
	{0x66, 0xFF, 0x00, 0x00, 0x01, REG16, 0x00, 0x00, 0x00, "inc", FLAG_MODRM | FLAG_MODRM_OPCODE },
	{0x66, 0xFF, 0x00, 0x00, 0x01, MEM16, 0x00, 0x00, 0x00, "inc", FLAG_MODRM | FLAG_MODRM_OPCODE },
	{0x00, 0xFF, 0x00, 0x00, 0x01, REG32, 0x00, 0x00, 0x00, "inc", FLAG_MODRM | FLAG_MODRM_OPCODE },
	{0x00, 0xFF, 0x00, 0x00, 0x01, MEM32, 0x00, 0x00, 0x00, "inc", FLAG_MODRM | FLAG_MODRM_OPCODE },

};

const Instruction dec_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,    o2,    o3,   o4,   mnmnc, flags
	// single byte x16
	{0x66, 0x48 + AX, 0x00, 0x00, 0x01, REG16_AX, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	{0x66, 0x48 + CX, 0x00, 0x00, 0x01, REG16_CX, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	{0x66, 0x48 + DX, 0x00, 0x00, 0x01, REG16_DX, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	{0x66, 0x48 + BX, 0x00, 0x00, 0x01, REG16_BX, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	{0x66, 0x48 + SP, 0x00, 0x00, 0x01, REG16_SP, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	{0x66, 0x48 + BP, 0x00, 0x00, 0x01, REG16_BP, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	{0x66, 0x48 + SI, 0x00, 0x00, 0x01, REG16_SI, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	{0x66, 0x48 + DI, 0x00, 0x00, 0x01, REG16_DI, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	// single byte x32
	{0x00, 0x48 + EAX, 0x00, 0x00, 0x01, REG32_EAX, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	{0x00, 0x48 + ECX, 0x00, 0x00, 0x01, REG32_ECX, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	{0x00, 0x48 + EDX, 0x00, 0x00, 0x01, REG32_EDX, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	{0x00, 0x48 + EBX, 0x00, 0x00, 0x01, REG32_EBX, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	{0x00, 0x48 + ESP, 0x00, 0x00, 0x01, REG32_ESP, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	{0x00, 0x48 + EBP, 0x00, 0x00, 0x01, REG32_EBP, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	{0x00, 0x48 + ESI, 0x00, 0x00, 0x01, REG32_ESI, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	{0x00, 0x48 + EDI, 0x00, 0x00, 0x01, REG32_EDI, 0x00, 0x00, 0x00, "dec", FLAG_SINGLE_BYTE},
	//
	{0x00, 0xFE, 0x00, 0x01, 0x01, REG8, 0x00, 0x00, 0x00, "dec", FLAG_MODRM | FLAG_MODRM_OPCODE },
	{0x00, 0xFE, 0x00, 0x01, 0x01, MEM8, 0x00, 0x00, 0x00, "dec", FLAG_MODRM | FLAG_MODRM_OPCODE },
	{0x66, 0xFF, 0x00, 0x01, 0x01, REG16, 0x00, 0x00, 0x00, "dec", FLAG_MODRM | FLAG_MODRM_OPCODE },
	{0x66, 0xFF, 0x00, 0x01, 0x01, MEM16, 0x00, 0x00, 0x00, "dec", FLAG_MODRM | FLAG_MODRM_OPCODE },
	{0x00, 0xFF, 0x00, 0x01, 0x01, REG32, 0x00, 0x00, 0x00, "dec", FLAG_MODRM | FLAG_MODRM_OPCODE },
	{0x00, 0xFF, 0x00, 0x01, 0x01, MEM32, 0x00, 0x00, 0x00, "dec", FLAG_MODRM | FLAG_MODRM_OPCODE }

};

const Instruction fld_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,    o2,    o3,   o4,   mnmnc, flags
	{0x00, 0xD9, 0x00, 0x00, 0x01, MEM32, 0x00, 0x00, 0x00, "fld", FLAG_MODRM | FLAG_MODRM_OPCODE }
	// todo: add the other opcodes
};

const Instruction fmulp_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,    o2,    o3,   o4,   mnmnc, flags
	{0x00, 0xDE, 0xC9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "fmulp", FLAG_SINGLE_BYTE | FLAG_2ND_OPCODE }
	// todo: add the other opcodes
};

const Instruction fist_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,    o2,    o3,   o4,   mnmnc, flags
	{0x00, 0xDB, 0x00, 0x02, 0x01, MEM32, 0x00, 0x00, 0x00, "fist", FLAG_MODRM | FLAG_MODRM_OPCODE }
	// todo: add the other opcodes
};

const Instruction fistp_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,    o2,    o3,   o4,   mnmnc, flags
	{0x00, 0xDB, 0x00, 0x03, 0x01, MEM32, 0x00, 0x00, 0x00, "fistp", FLAG_MODRM | FLAG_MODRM_OPCODE }
	// todo: add the other opcodes
};

const Instruction fild_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,    o2,    o3,   o4,   mnmnc, flags
	{0x00, 0xDB, 0x00, 0x00, 0x01, MEM32, 0x00, 0x00, 0x00, "fild", FLAG_MODRM | FLAG_MODRM_OPCODE }
	// todo: add the other opcodes
};

const Instruction pushad_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,    o2,    o3,   o4,   mnmnc, flags
	{0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "pushad", FLAG_SINGLE_BYTE }
};

const Instruction popad_instructions[] = {
	// pf,  op,  op2,  ext,  cnt,  o1,    o2,    o3,   o4,   mnmnc, flags
	{0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, "popad", FLAG_SINGLE_BYTE }
};

